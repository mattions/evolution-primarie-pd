// Generated by CoffeeScript 1.3.3
(function() {
  var BarGraph, CircleGraph,
    _this = this;

  BarGraph = (function() {

    function BarGraph(data, chart_id) {
      this.data = data;
      this.width = 700;
      this.height = 300;
      this.barWidth = 40;
      this.vis = d3.select(chart_id).append('svg:svg').attr('width', this.width).attr('height', this.height);
      console.log("barGraph created");
    }

    BarGraph.prototype.setScale = function(xMinDomain, xMaxDomain, yMinDomain, yMaxDomain, xPadding, yPadding) {
      this.xMinDomain = xMinDomain;
      this.xMaxDomain = xMaxDomain;
      this.yMinDomain = yMinDomain;
      this.yMaxDomain = yMaxDomain;
      this.xPadding = xPadding;
      this.yPadding = yPadding;
      this.xScale = d3.scale.linear().domain([this.xMinDomain, this.xMaxDomain]).range([0, this.width - this.xPadding]);
      return this.yScale = d3.scale.linear().domain([this.yMinDomain, this.yMaxDomain]).range([0, this.height - this.yPadding]);
    };

    BarGraph.prototype.createBars = function() {
      var _this = this;
      return this.vis.selectAll('rect').data(this.data).enter().append("svg:rect").attr("class", function(datum) {
        return "year-" + datum.year;
      }).attr("x", function(datum, index) {
        return _this.xScale(index * _this.barWidth);
      }).attr("y", function(datum) {
        return _this.height - _this.yPadding - _this.yScale(datum.votes);
      }).attr("width", this.barWidth).attr("height", function(datum) {
        return _this.yScale(datum.votes);
      });
    };

    BarGraph.prototype.createText = function() {
      var _this = this;
      return this.vis.selectAll("text").data(this.data).enter().append("text").text(function(datum) {
        return datum.candidate.split(" ").slice(-1)[0];
      }).attr("text-anchor", "start").attr("x", function(datum, index) {
        return _this.xScale(index * _this.barWidth);
      }).attr("y", function(datum) {
        return _this.height;
      });
    };

    return BarGraph;

  })();

  CircleGraph = (function() {

    function CircleGraph(data, chart_id) {
      this.data = data;
      this.width = 700;
      this.height = 300;
      this.circleSpace = 30;
      this.vis = d3.select(chart_id).append('svg:svg').attr('width', this.width).attr('height', this.height);
      console.log("circleGraph created");
    }

    CircleGraph.prototype.setScale = function(xMinDomain, xMaxDomain, yMinDomain, yMaxDomain, xPadding, yPadding) {
      this.xMinDomain = xMinDomain;
      this.xMaxDomain = xMaxDomain;
      this.yMinDomain = yMinDomain;
      this.yMaxDomain = yMaxDomain;
      this.xPadding = xPadding;
      this.yPadding = yPadding;
      this.xScale = d3.scale.linear().domain([this.xMinDomain, this.xMaxDomain]).range([100, this.width - this.xPadding]);
      return this.yScale = d3.scale.linear().domain([this.yMinDomain, this.yMaxDomain]).range([0, this.height - this.yPadding]);
    };

    CircleGraph.prototype.createCircle = function(meanVote) {
      var _this = this;
      console.log("adding circle with");
      console.log(this.data);
      return this.vis.selectAll('circle').data(this.data).enter().append("svg:circle").attr("class", function(datum) {
        return "year-" + datum.year;
      }).attr("cx", function(datum, index) {
        return _this.xScale(index * _this.circleSpace);
      }).attr("cy", this.yScale(meanVote)).attr("r", function(datum) {
        return _this.yScale(datum.votes);
      });
    };

    CircleGraph.prototype.createYearsText = function() {
      var _this = this;
      return this.vis.selectAll(".legend").data(this.data).enter().append("text").attr("class", "legend").attr("class", function(datum) {
        return "year-" + datum.year + "-text";
      }).text(function(datum) {
        return datum.year;
      }).attr("text-anchor", "middle").attr("x", function(datum, index) {
        return _this.xScale(index * _this.circleSpace);
      }).attr("y", function(datum) {
        return _this.height;
      });
    };

    CircleGraph.prototype.createVotesText = function(meanValue) {
      var _this = this;
      console.log("Creating the votes");
      return this.vis.selectAll("votes").data(this.data).enter().append("text").attr("class", "votes").text(function(datum) {
        return datum.votes;
      }).attr("text-anchor", "middle").attr("x", function(datum, index) {
        return _this.xScale(index * _this.circleSpace);
      }).attr("y", this.yScale(meanValue));
    };

    return CircleGraph;

  })();

  d3.json("assets/primariePdData.json", function(data) {
    var arrayYearVote, barGraph, circleGraph, d, datum, meanValue, textHeight, vote, votes, votesPerYear, votesTotal, xManDomain, xMaxDomain, xMinDomain, xPadding, yMaxDomain, yMaxdomain, yMinDomain, yPadding, year, years, _i, _j, _len, _len1;
    votes = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        d = data[_i];
        _results.push(d["votes"]);
      }
      return _results;
    })();
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      d = data[_i];
      console.log(d["year"], d["candidate"], d["votes"]);
    }
    textHeight = 20;
    barGraph = new BarGraph(data, "#graph-bar");
    barGraph.setScale(xMinDomain = 0, xManDomain = barGraph.barWidth * barGraph.data.length, yMinDomain = 0, yMaxdomain = d3.max(votes), xPadding = 0, yPadding = textHeight);
    barGraph.createBars();
    barGraph.createText();
    votesPerYear = [];
    for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
      datum = data[_j];
      year = datum.year;
      if (votesPerYear.hasOwnProperty(year)) {
        votesPerYear[year] += datum.votes;
      } else {
        votesPerYear[year] = datum.votes;
      }
    }
    years = [];
    votesTotal = [];
    for (year in votesPerYear) {
      vote = votesPerYear[year];
      years.push(year);
      votesTotal.push(vote);
    }
    arrayYearVote = [];
    for (year in votesPerYear) {
      votes = votesPerYear[year];
      arrayYearVote.push({
        "year": parseInt(year),
        "votes": votes
      });
    }
    circleGraph = new CircleGraph(arrayYearVote, "#graph-circle");
    circleGraph.setScale(xMinDomain = 0, xMaxDomain = circleGraph.data.length * circleGraph.circleSpace, yMinDomain = 0, yMaxDomain = 3 * d3.max(votesTotal), xPadding = 0, yPadding = 0);
    console.log(arrayYearVote.length);
    meanValue = 1.5 * d3.mean(votesTotal);
    circleGraph.createCircle(meanValue);
    circleGraph.createVotesText(meanValue);
    return circleGraph.createYearsText();
  });

}).call(this);
